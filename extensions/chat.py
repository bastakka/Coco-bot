"""Openai bot commands cog module"""
import time
from collections import deque

import openai
from config.config import get_config
from discord.ext import commands
from logs.logger import get_logger

config = get_config()
logger = get_logger(__name__)


def get_chatlog_from_userid(chat, user_id: int) -> str:
    """Get chatlog from user id."""
    if user_id in chat.chats:
        return "".join(message for message in chat.chats[user_id])
    chat.chats[user_id] = deque(maxlen=20)
    return ""


class Chat(commands.Cog):
    """Bot openai related commands cog"""

    def __init__(self, bot: commands.Bot) -> None:
        """Chat class init with empty chat log for each user.

        Loads an openai API key from config, which it uses to access Completion engine
        """
        self.bot = bot
        self.chats = {}
        openai.api_key = config.openai["key"]

    async def cog_before_invoke(self, ctx: commands.Context) -> None:
        """Code that runs before invoked command.

        Used for logging chat commands.
        """
        log_channel = self.bot.get_channel(int(config.bot_log_channel_id))
        message = f"{ctx.author.name}#{ctx.author.discriminator} issued the command `{ctx.command}`"
        chat = ctx.guild.name if ctx.guild else "Direct message"
        logger.info("%s in %s.", message, chat)
        await log_channel.send(f"{message} in {chat}.")
        ctx.start = time.time()

    async def cog_after_invoke(self, ctx: commands.Context) -> None:
        """Code that runs after invoked command.

        Used for logging how long command took to complete.
        """
        end = time.time()
        log_channel = self.bot.get_channel(int(config.bot_log_channel_id))
        message = f"Command {ctx.command} successfully completed after"
        delta = end - ctx.start
        logger.info("%s %.2f seconds.", message, delta)
        await log_channel.send(f"{message} {delta} seconds.")

    @commands.Cog.listener()
    async def on_message(self, message) -> None:
        """Chat in Direct message by default.

        If the message is a command, it will be ignored.
        """
        if message.author.bot:
            return

        if message.content.lower().startswith("coco "):  # Ignore commands in Direct message
            return  # Which is always "coco " from bot.py

        if message.guild is None:
            log_channel = self.bot.get_channel(int(config.bot_log_channel_id))
            log_user = f"{message.author.name}#{message.author.discriminator}"
            log_message = log_user + " issued `openai` in Direct message."
            await log_channel.send(log_message)
            logger.info(log_message)
            start = time.time()

            chatlog = get_chatlog_from_userid(self, message.author.id)
            content = message.content
            prompt = f"{chatlog}\nHuman: {content}\nAI:"
            response = openai.Completion.create(
                prompt=prompt,
                engine="davinci",
                stop=["\nHuman"],
                temperature=0.8,
                top_p=1,
                frequency_penalty=0.5,
                best_of=1,
                max_tokens=150,
            )
            answer = response.choices[0].text.strip().replace("AI: ", "")
            self.chats[message.author.id].append(f"\nHuman: {content}\nAI: {answer}")
            await message.author.send(answer)

            end = time.time()
            log_message = "Openai response took: "
            delta = end - start
            logger.info("%s %.2f seconds.", log_message, delta)
            await log_channel.send(f"{log_message} {delta} seconds.")

    @commands.command()
    async def chat(self, ctx: commands.Context, *, message: str):
        """Bot chat command taking message as an argument.

        Adds message to chat log if there is any and passes entire log to Completion engine.
        First response from Completion engine is taken as an ouput and sent to user.

        Log is generated by separating output of the user and the Completion engine.
        Log is then saved as a deque list of maximum len of 20
        """

        log = get_chatlog_from_userid(self, ctx.author.id)
        prompt = f"{log}\nHuman: {message}\nAI:"
        response = openai.Completion.create(
            prompt=prompt,
            engine="davinci",
            stop=["\nHuman"],
            temperature=0.8,
            top_p=1,
            frequency_penalty=0.5,
            best_of=1,
            max_tokens=150,
        )
        answer = response.choices[0].text.strip().replace("AI: ", "")
        self.chats[ctx.author.id].append(f"\nHuman: {message}\nAI: {answer}")
        await ctx.send(answer)

    @commands.command()
    async def chat_clear(self, ctx: commands.Context):
        """Bot command that clears user's openai chat log.

        Chat log is reinitialized as a new deque list of maximum len of 20
        """
        self.chats[ctx.author.id] = deque(maxlen=20)
        await ctx.send("Chat history cleared.")


def setup(bot) -> None:
    """Setup function used by discord.py extension loader.

    Adds Chat cog to bot.
    """
    bot.add_cog(Chat(bot))
